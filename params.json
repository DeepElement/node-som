{"name":"Node-som","tagline":"A Kohonen Network api for Node\"","body":"A Kohonen Network api for Node\r\n=====================================================\r\n\r\n## Installation\r\n\r\nnpm install node-som\r\n\r\n## Usage:\r\n\r\n```\r\n// Inject the module\r\nvar som = require('node-som');\r\n\r\n// Create the instance\r\nvar somInstance = new som({\r\n\tinputLength: 2,\r\n\tmaxClusters: 5,\r\n\tloggingEnabled: true\r\n});\r\n\r\n// Train (all automatic)\r\nsomInstance.train();\r\n\r\n// Create input array. \r\n// All items features should be normalized to domain [0,1]\r\nvar sample = [0.24, 0.34];\r\n\r\n// Call classify\r\nvar group = somInstance.classify(sample);\r\n\r\n// Your result will be a group within the cluster boundaries\r\n\r\n```\r\n\r\n## Options\r\n\r\n__loggingEnabled__ (bool)\r\n\r\n__maxClusters__ (Integer) - Max number of Classification groups to use. This is an upper-bound and an optimized network usually contains less than this number.\r\n\r\n__created__ (Date) - When the network was initially created\r\n\r\n__classificationCount__ (Integer) - Represents the number of classifications run through the network. Used as a metric of maturity.\r\n\r\n__inputLength__ (Integer) - Component length of input vectors\r\n\r\n__decayRate__ (Double) - TODO\r\n\r\n__minAlpha__ (Double) - TODO\r\n\r\n__alpha__ (Double) - TODO\r\n\r\n__radiusReductionPoint__ (Double) - TODO\r\n\r\n__inputPatterns__ (Integer) - Represents the number of random samples to self-train on. Higher numbers cost more, but can result in more granular groups\r\n\r\n## Input Scaling\r\nNo matter how tricked-out the network, you must collapse your input patterns into a [0,1] domain. Since the result of a Kohonen network for classification is to surface the dominant node, you don't have to worry about descaling the classification result.\r\n\r\n__Domain Normalization__\r\n\r\nIf you have access to all of the input vectors, simply apply: \r\n\r\n\tnormalizedInput[i] = input[i] - min(inputsAt[i]) / (max(inputsAt[i]) - min(inputsAt[i]));\r\n\r\n_Note: for mutlidimensional input vectors, make sure you normalize component by component across all other input samples_\r\n\r\nThis is a reliable method that keeps unit proportions in-tact, in the event you want to actually validate the normalized array visually. \r\n\r\n__Log Scaling__\r\n\r\nTODO: Fill-in example!\r\n\r\n","google":"UA-18193655-5","note":"Don't delete this file! It's used internally to help with page regeneration."}